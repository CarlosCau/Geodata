/**
 * Minified by jsDelivr using UglifyJS v3.4.4.
 * Original file: /gh/trafforddatalab/leaflet.reachability@1.0.0/leaflet.reachability.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
L.Control.Reachability = L.Control.extend({
	options: {
		position: "topleft",
		pane: "overlayPane",
		zIndexMouseMarker: 9e3,
		collapsed: !0,
		controlContainerStyleClass: "",
		drawActiveMouseClass: "leaflet-crosshair",
		settingsContainerStyleClass: "reachability-control-settings-container",
		settingsButtonStyleClass: "reachability-control-settings-button",
		activeStyleClass: "reachability-control-active",
		errorStyleClass: "reachability-control-error",
		expandButtonContent: "&#x2609;",
		expandButtonStyleClass: "reachability-control-expand-button",
		expandButtonTooltip: "Generar √Årea de Accesibilidad",
		collapseButtonContent: "^",
		collapseButtonStyleClass: "reachability-control-collapse-button",
		collapseButtonTooltip: "Hide reachability options",
		drawButtonContent: "Drw",
		drawButtonStyleClass: "",
		drawButtonTooltip: "Draw reachability",
		deleteButtonContent: "Del",
		deleteButtonStyleClass: "",
		deleteButtonTooltip: "Delete reachability",
		timeButtonContent: "Tme",
		timeButtonStyleClass: "",
		timeButtonTooltip: "Reachability based on time",

		walkingButtonContent: "Drv",
		walkingButtonStyleClass: "",
		walkingButtonTooltip: "Viaje en carro",

//		rangeControlDistanceTitle: "Dist.",
//		rangeControlDistanceMin: 1,
//		rangeControlDistanceMax: 10,
//		rangeControlDistanceInterval: 1,
//		rangeControlDistanceUnits: "km",
		rangeControlTimeTitle: "Time",
		rangeControlTimeMin: 15,
		rangeControlTimeMax: 60,
		rangeControlTimeInterval: 15,
		rangeTypeDefault: "time",
		rangeIntervalsLabel: "intervals",
		apiKey: "5b3ce3597851110001cf6248fd3f518029ed4b61936293d00794de8e",
		ajaxRequestFn: null,
		travelModeWalkingProfile: "foot-hiking",
		travelModeAccessibilityProfile: "wheelchair",
		travelModeDefault: null,
		styleFn: null,
		mouseOverFn: null,
		mouseOutFn: null,
		clickFn: null,
		showOriginMarker: !0,
		markerFn: null,
		markerOverFn: null,
		markerOutFn: null,
		markerClickFn: null
	},
	onAdd: function(t) {
		return this.version = "2.0.0",
			this._map = t,
			this._collapsed = this.options.collapsed,
			this._drawMode = !1,
			this._deleteMode = !1,
//			this._rangeIsDistance = "distance" == this.options.rangeTypeDefault,
			this._travelMode = this.options.travelModeDefault, this._travelMode != this.options.travelModeWalkingProfile && this._travelMode != this.options.travelModeAccessibilityProfile && (this._travelMode = this.options.travelModeWalkingProfile),
			this._mouseMarker = null,
			this.latestIsolines = null,
			this.isolinesGroup = L.geoJSON(null, {
				style: this.options.styleFn,
				pane: this.options.pane,
				attribution: '&copy; Powered by <a href="https://openrouteservice.org/" target="_blank">openrouteservice</a>'
			}),
			this._container = L.DomUtil.create("div", "leaflet-bar " + this.options.controlContainerStyleClass), L.DomEvent.disableClickPropagation(this._container),
			this._createUI(),
			this._map.fire("reachability:control_added"),
			this._container
	},
	onRemove: function(t) {
		this._deactivateDraw(),
			this.isolinesGroup.removeFrom(this._map),
			this.isolinesGroup.clearLayers(),
			this._map.fire("reachability:control_removed")
	},
	_createUI: function() {
		this._uiContainer = L.DomUtil.create("div", this.options.settingsContainerStyleClass),
			this._container.appendChild(this._uiContainer),
			this._actionsAndModesContainer = L.DomUtil.create("div", "reachability-control-settings-block-container", this._uiContainer), this._drawControl = this._createButton("span", this.options.drawButtonContent, this.options.drawButtonTooltip, this.options.settingsButtonStyleClass + " " + this.options.drawButtonStyleClass, this._actionsAndModesContainer, this._toggleDraw), this._deleteControl = this._createButton("span", this.options.deleteButtonContent, this.options.deleteButtonTooltip, this.options.settingsButtonStyleClass + " " + this.options.deleteButtonStyleClass, this._actionsAndModesContainer, this._toggleDelete), this._timeControl = this._createButton("span", this.options.timeButtonContent, this.options.timeButtonTooltip, this.options.settingsButtonStyleClass + " " + this.options.timeButtonStyleClass, this._actionsAndModesContainer, this._setRangeByTime), this._modesContainer = L.DomUtil.create("div", "reachability-control-settings-block-container", this._uiContainer),this._walkingControl = this._createButton("span", this.options.walkingButtonContent, this.options.walkingButtonTooltip, this.options.settingsButtonStyleClass + " " + this.options.walkingButtonStyleClass, this._modesContainer, this._setTravelWalking),
			this._rangeDistanceTitle = L.DomUtil.create("span", "reachability-control-range-title reachability-control-hide-content", this._uiContainer),
			this._rangeDistanceTitle.innerHTML = this.options.rangeControlDistanceTitle, this._rangeDistanceList = L.DomUtil.create("select", "reachability-control-range-list reachability-control-hide-content", this._uiContainer);
		for (
			var t = this.options.rangeControlDistanceMin; t <= this.options.rangeControlDistanceMax; t += this.options.rangeControlDistanceInterval) {
			(e = L.DomUtil.create("option", "", this._rangeDistanceList)).setAttribute("value", t), e.innerHTML = t + " " + this.options.rangeControlDistanceUnits
		}
		this._rangeTimeTitle = L.DomUtil.create("span", "reachability-control-range-title reachability-control-hide-content", this._uiContainer), this._rangeTimeTitle.innerHTML = this.options.rangeControlTimeTitle, this._rangeTimeList = L.DomUtil.create("select", "reachability-control-range-list reachability-control-hide-content", this._uiContainer);
		for (
			t = this.options.rangeControlTimeMin; t <= this.options.rangeControlTimeMax; t += this.options.rangeControlTimeInterval) {
			var e;
			(e = L.DomUtil.create("option", "", this._rangeTimeList)).setAttribute("value", t),

				e.innerHTML = t+ " min"
		}
		this._showIntervalContainer = L.DomUtil.create("span", "reachability-control-show-range-interval", this._uiContainer), this._showInterval = L.DomUtil.create("input", "", this._showIntervalContainer), this._showInterval.setAttribute("id", "rangeInterval"), this._showInterval.setAttribute("type", "checkbox"), this._showIntervalLabel = L.DomUtil.create("label", "", this._showIntervalContainer), this._showIntervalLabel.setAttribute("for", "rangeInterval"),
			this._showIntervalLabel.innerHTML = this.options.rangeIntervalsLabel,
			this._rangeIsDistance ? (
				L.DomUtil.addClass(this._distanceControl, this.options.activeStyleClass),
				L.DomUtil.removeClass(this._rangeDistanceTitle, "reachability-control-hide-content"),
				L.DomUtil.removeClass(this._rangeDistanceList, "reachability-control-hide-content")
			) :
			(
				L.DomUtil.addClass(this._timeControl, this.options.activeStyleClass),
				L.DomUtil.removeClass(this._rangeTimeTitle, "reachability-control-hide-content"),
				L.DomUtil.removeClass(this._rangeTimeList, "reachability-control-hide-content")
			),
			this._toggleTravelMode(null),
			this._collapsed && (L.DomUtil.addClass(this._uiContainer, "reachability-control-hide-content"), this._expandButtonContainer = L.DomUtil.create("span", ""),
				this._container.appendChild(this._expandButtonContainer),
				this._createButton("a", this.options.expandButtonContent,
					this.options.expandButtonTooltip, this.options.expandButtonStyleClass,
					this._expandButtonContainer, this._expand),
				this._createButton("span",
					this.options.collapseButtonContent,
					this.options.collapseButtonTooltip,
					this.options.collapseButtonStyleClass,
					this._uiContainer,
					this._collapse
				))
	},
	_createButton: function(t, e, i, o, s, n) {
		var a = L.DomUtil.create(t, o, s);
		return a.innerHTML = e, a.title = i, "a" === t && (a.href = "#"), a.setAttribute("role", "button"), a.setAttribute("aria-label", i), L.DomEvent.on(a, "mousedown touchstart dblclick", L.DomEvent.stopPropagation).on(a, "click", L.DomEvent.stop).on(a, "click", n, this), a
	},
	_expand: function() {
		L.DomUtil.removeClass(this._uiContainer, "reachability-control-hide-content"), L.DomUtil.addClass(this._expandButtonContainer, "reachability-control-hide-content"), L.DomUtil.hasClass(this._container, this.options.activeStyleClass) && L.DomUtil.removeClass(this._container, this.options.activeStyleClass), this._map.fire("reachability:control_expanded")
	},

	_collapse: function() {
		L.DomUtil.addClass(this._uiContainer, "reachability-control-hide-content"), L.DomUtil.removeClass(this._expandButtonContainer, "reachability-control-hide-content"), !this._drawMode && !this._deleteMode || L.DomUtil.hasClass(this._container, this.options.activeStyleClass) || L.DomUtil.addClass(this._container, this.options.activeStyleClass), this._map.fire("reachability:control_collapsed")
	},

	_toggleDraw: function() {
		this._deleteMode && this._deactivateDelete(), this._drawMode ? this._deactivateDraw() : this._activateDraw()
	},

	_toggleDelete: function() {
		this._drawMode && this._deactivateDraw(), this._deleteMode ? this._deactivateDelete() : this._activateDelete()
	},

	_activateDraw: function() {
		this._drawMode = !0, L.DomUtil.addClass(this._drawControl, this.options.activeStyleClass), this._deleteMode && this._deactivateDelete(), this._drawRequestRegistered = !1, this._mouseMarker || (this._mouseMarker = L.marker(this._map.getCenter(), {
			icon: L.divIcon({
				className: this.options.drawActiveMouseClass,
				iconAnchor: [400, 400],
				iconSize: [800, 800]
			}),
			opacity: 0,
			zIndexOffset: this.options.zIndexMouseMarker
		})), this._mouseMarker.on("mousemove", this._updatePointerMarkerPosition, this).on("click", this._registerDrawRequest, this).addTo(this._map), this._map.on("mousemove", this._updatePointerMarkerPosition, this).on("mousedown", this._updatePointerMarkerPosition, this).on("click", this._registerDrawRequest, this), this._map.fire("reachability:draw_activated")
	},

	_deactivateDraw: function() {
		this._drawMode = !1, L.DomUtil.removeClass(this._drawControl, this.options.activeStyleClass), null !== this._mouseMarker && (this._mouseMarker.off("mousemove", this._updatePointerMarkerPosition, this).off("click", this._registerDrawRequest, this).removeFrom(this._map), this._mouseMarker = null), this._map.off("mousemove", this._updatePointerMarkerPosition, this).off("mousedown", this._updatePointerMarkerPosition, this).off("click", this._registerDrawRequest, this), this._map.fire("reachability:draw_deactivated")
	},

	_activateDelete: function() {
		var t = this.isolinesGroup.getLayers().length;
		0 < t ? 1 == t ? (this.isolinesGroup.clearLayers(), this.isolinesGroup.removeFrom(this._map), this._map.fire("reachability:delete")) : (this._deleteMode = !0, L.DomUtil.addClass(this._deleteControl, this.options.activeStyleClass), this._map.fire("reachability:delete_activated")) : this._showError(this._deleteControl)
	},

	_deactivateDelete: function() {
		this._deleteMode = !1, L.DomUtil.removeClass(this._deleteControl, this.options.activeStyleClass), L.DomUtil.hasClass(this._container, this.options.activeStyleClass) && L.DomUtil.removeClass(this._container, this.options.activeStyleClass), this._map.fire("reachability:delete_deactivated")
	},
	_delete: function(t) {
		var e = t.sourceTarget._eventParents;
		for (var i in e) e.hasOwnProperty(i) && "<prototype>" != i && e[i].removeFrom(this.isolinesGroup);
		0 == this.isolinesGroup.getLayers().length && (this._deactivateDelete(), this.isolinesGroup.removeFrom(this._map)), this._map.fire("reachability:delete")
	},
	_showError: function(t) {
		var e = this.options.errorStyleClass;
		L.DomUtil.addClass(t, e), setTimeout(function() {
			L.DomUtil.removeClass(t, e)
		}, 500)
	},

	_setRangeByDistance: function() {
		0 == this._rangeIsDistance && (L.DomUtil.addClass(this._distanceControl, this.options.activeStyleClass), L.DomUtil.removeClass(this._timeControl, this.options.activeStyleClass), L.DomUtil.removeClass(this._rangeDistanceTitle, "reachability-control-hide-content"), L.DomUtil.addClass(this._rangeTimeTitle, "reachability-control-hide-content"), L.DomUtil.removeClass(this._rangeDistanceList, "reachability-control-hide-content"), L.DomUtil.addClass(this._rangeTimeList, "reachability-control-hide-content"), this._rangeIsDistance = !0)
	},
	_setRangeByTime: function() {
		this._rangeIsDistance && (L.DomUtil.addClass(this._timeControl, this.options.activeStyleClass), L.DomUtil.removeClass(this._distanceControl, this.options.activeStyleClass), L.DomUtil.removeClass(this._rangeTimeTitle, "reachability-control-hide-content"), L.DomUtil.addClass(this._rangeDistanceTitle, "reachability-control-hide-content"), L.DomUtil.removeClass(this._rangeTimeList, "reachability-control-hide-content"), L.DomUtil.addClass(this._rangeDistanceList, "reachability-control-hide-content"), this._rangeIsDistance = !1)
	},

	_setTravelWalking: function() {
		this._toggleTravelMode(this.options.travelModeWalkingProfile)
	},

	_toggleTravelMode: function(t) {
		var e = null == t ? this._travelMode : t;
		if (this._travelMode != t) {
			switch (e) {
				default:
					L.DomUtil.addClass(this._walkingControl, this.options.activeStyleClass)
			}
			this._travelMode = e
		}
	},

	_updatePointerMarkerPosition: function(t) {
		var e = this._map.mouseEventToLayerPoint(t.originalEvent),
			i = this._map.layerPointToLatLng(e);
		this._mouseMarker.setLatLng(i), L.DomEvent.stop(t.originalEvent)
	},

	_registerDrawRequest: function(t) {
		L.DomEvent.stop(t.originalEvent), this._drawRequestRegistered || (this._drawRequestRegistered = !0, this._callApi(t.latlng))
	},

	_callApi: function(h) {
		var t = "https://api.openrouteservice.org/isochrones?api_key=" + this.options.apiKey;
		t += "&locations=" + h.lng + "%2C" + h.lat, this._rangeIsDistance ? (t += "&range_type=distance&units=" + this.options.rangeControlDistanceUnits + "&range=" + this._rangeDistanceList.value, this._showInterval.checked && (t += "&interval=" + this.options.rangeControlDistanceInterval)) : (t += "&range_type=time&range=" + 60 * this._rangeTimeList.value, this._showInterval.checked && (t += "&interval=" + 60 * this.options.rangeControlTimeInterval)), t += "&profile=" + this._travelMode + "&location_type=start&attributes=area|total_pop", this._map.fire("reachability:api_call_start");
		var d = this;
		try {
			(null == this.options.ajaxRequestFn ? simpleAjaxRequest : this.options.ajaxRequestFn)(t, function(t) {
				if (null == t) d._map.fire("reachability:no_data"), window.console && window.console.log && window.console.log("Leaflet.reachability.js error calling API, no data returned. Likely cause is API unavailable or bad parameters."), d._showError(d._drawControl), d._deactivateDraw();
				else if (t.hasOwnProperty("features")) {
					t.features.reverse();
					for (var e = 0; e < t.features.length; e++) {
						var i, o, s, n, a = t.features[e].properties,
							l = d.options.rangeControlDistanceUnits;
						"mi" == l ? (l = "miles", i = L.Util.formatNum(a.value / 1609.34, 2), n = L.Util.formatNum(a.total_area_km / 2.58998811, 2)) : "m" == d.options.rangeControlDistanceUnits ? (i = L.Util.formatNum(a.value, 2), n = L.Util.formatNum(1e6 * a.total_area_km, 2)) : (i = L.Util.formatNum(a.value / 1e3, 2), n = L.Util.formatNum(a.total_area_km, 2)), d._rangeIsDistance ? (o = "distance", s = l) : (o = "time", s = "min", i = L.Util.formatNum(a.value / 60, 2));
						var r = {
							"Travel mode": d._travelMode,
							Measure: o,
							"Range units": s,
							Range: i,
							Area: n,
							"Area units": l + "^2",
							Latitude: a.center[1],
							Longitude: a.center[0],
							Population: a.total_pop
						};
						t.features[e].properties = r
					}
					var c;
					if (d.latestIsolines = L.geoJSON(t, {
							style: d.options.styleFn,
							pane: d.options.pane
						}), d.latestIsolines.eachLayer(function(t) {
							t.on({
								mouseover: function(t) {
									null != d.options.mouseOverFn && d.options.mouseOverFn(t)
								},
								mouseout: function(t) {
									null != d.options.mouseOutFn && d.options.mouseOutFn(t)
								},
								click: function(t) {
									d._deleteMode ? (L.DomEvent.stopPropagation(t), d._delete(t)) : null != d.options.clickFn && d.options.clickFn(t)
								}
							})
						}), d.options.showOriginMarker)(c = null != d.options.markerFn ? d.options.markerFn(h, d._travelMode, o) : L.circleMarker(h, {
						radius: 3,
						weight: 0,
						fillColor: "#0073d4",
						fillOpacity: 1
					})).on({
						mouseover: function(t) {
							null != d.options.markerOverFn && d.options.markerOverFn(t)
						},
						mouseout: function(t) {
							null != d.options.markerOutFn && d.options.markerOutFn(t)
						},
						click: function(t) {
							d._deleteMode ? (L.DomEvent.stopPropagation(t), d._delete(t)) : null != d.options.markerClickFn && d.options.markerClickFn(t)
						}
					}), c.addTo(d.latestIsolines);
					d.latestIsolines.addTo(d.isolinesGroup), d._map.hasLayer(d.isolinesGroup) || d.isolinesGroup.addTo(d._map), d._map.fire("reachability:displayed")
				} else d.latestIsolines = null, d._map.fire("reachability:no_data"), window.console && window.console.log && window.console.log("Leaflet.reachability.js: API returned data but no GeoJSON layers."), d._showError(d._drawControl), d._deactivateDraw();
				d._map.fire("reachability:api_call_end"), d._drawRequestRegistered = !1
			})
		} catch (t) {
			d._map.fire("reachability:error"), d._map.fire("reachability:no_data"), d._map.fire("reachability:api_call_end"), window.console && window.console.log && window.console.log("Leaflet.reachability.js error attempting to call API.\nLikely cause is function simpleAjaxRequest has not been included and no alternative has been specified.\nSee docs for more details, actual error below.\n" + t), d._showError(d._drawControl), d._deactivateDraw()
		}
	}
}), L.control.reachability = function(t) {
	return new L.Control.Reachability(t)
};
//# sourceMappingURL=/sm/758cf28a816ac956041a8093bfdf20271b4e89704d25c8524f52577382959a64.map